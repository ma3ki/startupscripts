# api setting
site=$(jq -r ".Zone.Name" /root/.sacloud-api/server.json)
base=https://secure.sakura.ad.jp/cloud/zone/${site}/api/cloud/1.1
geturl=${base}/commonserviceitem/

# startup_script の進行状況を motd に書き出す関数
# usage) _motd <start|fail|end>
_motd() {
	LOG=$(ls /root/.sacloud-api/notes/*log)
	case $1 in
		start)
			echo -e "\n#-- Startup-script is \\033[0;32mrunning\\033[0;39m. --#\n\nPlease check the log file: ${LOG}\n" > /etc/motd
		;;
		fail)
			echo -e "\n#-- Startup-script \\033[0;31mfailed\\033[0;39m. --#\n\nPlease check the log file: ${LOG}\n" > /etc/motd
			exit 1
		;;
		end)
			cp -f /dev/null /etc/motd
		;;
	esac
}

# さくらのクラウドDNSで管理しているゾーンかを確認する関数
# さくらのクラウドで管理していない場合はエラー終了
# usage) _check_sacloud_zone ${DOMAIN}
_check_sacloud_zone() {
	if [ $(dig $1 ns +short | egrep -c "^ns[0-9]+.gslb[0-9]+.sakura.ne.jp.$") -ne 2 ]
	then
		echo "対象ゾーンのNSレコードにさくらのクラウドDNSが設定されておりません"
		_motd fail
	fi
}

# DNSレコードが登録済みかを確認する関数
# 登録済み 1
# 未登録 0
# usage) _check_exist_recode <name> <type> 
_check_exist_recode() {
	name=$1
	type=$2
	if [ $(dig ${name} ${type} +short | grep -vc "^$") -ne 0 ]
	then
		echo 1
	else
		echo 0
	fi
}

# DNSレコードを登録する
# ${KEY} は定義済みであること
# usage) _regist_sacloud_dns <zone> <name> <type> <rdata>
_regist_sacloud_dns() {
	zone=$1
	name=$2
	type=$3
	rdata=$4

	status=status.txt
	resource=resource.json
	rand=${RANDOM}
	add=add.${rand}
	regist=regist.${rand}

	_check_exist_recode $name $type

	set +x
	curl -s -v --user "${KEY}" ${geturl} 2>${status} | jq -r ".CommonServiceItems[] | select(.Status.Zone == \"${zone}\")" > ${resource}
	set -x

	resid=$(jq -r . ID ${resource})
	puturl=${geturl}${resid}
	recodes=$(jq -r ".Settings.DNS.ResourceRecordSets" ${resource})
	if [ $(grep -c "^< Status: 200 OK" ${status}) -ne 1 ]
	then
		echo "API接続エラー"
		_motd fail
	fi
	# rm -f ${status}

	cat <<-_EOL_> ${add}
	[
		{ "Name": "${name}", "Type": "${type}", "RData": "${rdata}" }
	]
	_EOL_

	rrs=$(echo "${recodes}" | jq -r ".+$(cat ${add})")
	cat <<-_EOL_> ${regist}
	{
		"CommonServiceItem": {
			"Settings": {
				"DNS":  {
					"ResourceRecordSets": $(echo ${rrs})
				}
			}
		}
	}
	_EOL_

	set +x
	curl -s -v --user "${KEY}" -X PUT -d "$(cat ${regist} | jq -c .)" ${puturl} 2>${status} | jq "."
	set -x

	if [ $(grep -c "^< Status: 200 OK" ${status}) -ne 1 ]
	then
		echo "API接続エラー"
		_motd fail
	fi
	# rm -f ${status}
}

